"""
Script para inicializar la base de datos con datos de ejemplo
"""

from datetime import datetime, timedelta, timezone
import random
from sqlalchemy.exc import SQLAlchemyError
from passlib.context import CryptContext
from app.core.database import Base, SessionLocal, engine
from app.models.persona import Persona
from app.models.sala import Sala
from app.models.articulo import Articulo
from app.models.reserva import Reserva

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def init_database():
    """Crear las tablas y cargar datos de ejemplo completos"""
    
    print("üöÄ Inicializando base de datos...")
    
    # Crear todas las tablas
    Base.metadata.create_all(bind=engine)
    
    # Crear sesi√≥n
    db = SessionLocal()
    
    try:
        # Verificar si ya hay datos
        if db.query(Persona).count() > 0:
            print("‚ö†Ô∏è  La base de datos ya contiene datos.")
            respuesta = input("¬øDesea reinicializar? Esto eliminar√° todos los datos (s/n): ")
            if respuesta.lower() != 's':
                print("Operaci√≥n cancelada.")
                return
            
            # Eliminar datos existentes
            print("üóëÔ∏è  Eliminando datos existentes...")
            db.query(Reserva).delete()
            db.query(Articulo).delete()
            db.query(Sala).delete()
            db.query(Persona).delete()
            db.commit()
        
        print("\nüë• Creando usuarios...")
        
        # Crear admin principal
        admin = Persona(
            nombre="Admin Sistema",
            email="admin@sistema.com",
            telefono="+5491112345678",
            password_hash=pwd_context.hash("admin123"),
            rol="admin"
        )
        db.add(admin)
        print("  ‚úì Admin creado (admin@sistema.com / admin123)")
        
        # Crear usuarios de prueba
        usuarios = []
        nombres_usuarios = [
            ("Ana", "P√©rez", "ana.perez@empresa.com"),
            ("Juan", "G√≥mez", "juan.gomez@empresa.com"),
            ("Mar√≠a", "L√≥pez", "maria.lopez@empresa.com"),
            ("Carlos", "Rodr√≠guez", "carlos.rodriguez@empresa.com"),
            ("Luis", "Mart√≠nez", "luis.martinez@empresa.com"),
            ("Sofia", "Fern√°ndez", "sofia.fernandez@empresa.com"),
            ("Diego", "S√°nchez", "diego.sanchez@empresa.com"),
            ("Laura", "Romero", "laura.romero@empresa.com"),
        ]
        
        for nombre, apellido, email in nombres_usuarios:
            usuario = Persona(
                nombre=f"{nombre} {apellido}",
                email=email,
                telefono=f"+54911{random.randint(10000000, 99999999)}",
                password_hash=pwd_context.hash("user123"),
                rol="usuario"
            )
            db.add(usuario)
            usuarios.append(usuario)
            print(f"  ‚úì Usuario: {nombre} {apellido}")
        
        db.commit()
        usuarios.insert(0, admin)  # Agregar admin a la lista
        
        # Crear salas
        print("\nüè¢ Creando salas...")
        salas_data = [
            ("Sala Ejecutiva", "Sala para reuniones ejecutivas con equipamiento premium", 10, True, True),
            ("Sala de Conferencias A", "Sala grande con proyector y sistema de audio", 20, True, True),
            ("Sala de Conferencias B", "Sala mediana para presentaciones", 15, True, False),
            ("Sala de Reuniones 1", "Sala peque√±a para equipos de trabajo", 6, False, True),
            ("Sala de Reuniones 2", "Sala peque√±a para reuniones r√°pidas", 6, False, False),
            ("Sala de Capacitaci√≥n", "Sala equipada para sesiones de training", 25, True, True),
            ("Sala Innovaci√≥n", "Espacio colaborativo con pizarras", 12, False, True),
        ]
        
        salas = []
        for nombre, desc, capacidad, proyector, pizarra in salas_data:
            sala = Sala(
                nombre=nombre,
                descripcion=desc,
                capacidad=capacidad,
                tiene_proyector=proyector,
                tiene_pizarra=pizarra
            )
            db.add(sala)
            salas.append(sala)
            print(f"  ‚úì Sala: {nombre}")
        
        db.commit()
        
        # Crear art√≠culos
        print("\nüì¶ Creando art√≠culos...")
        articulos_data = [
            ("Proyector Epson EB-X05", "Proyector XGA 3.300 l√∫menes", 5),
            ("Laptop HP EliteBook", "Laptop 14'' Intel i5 para presentaciones", 3),
            ("C√°mara Sony Alpha", "C√°mara mirrorless 24MP", 2),
            ("Pizarra Port√°til", "Pizarra blanca con ruedas", 10),
            ("Marcadores", "Set de marcadores de colores", 20),
            ("Cable HDMI", "Cable HDMI 2.0 de 2m", 15),
            ("Adaptador VGA", "Adaptador VGA a HDMI", 8),
            ("Micr√≥fono Inal√°mbrico", "Micr√≥fono de solapa", 4),
            ("Parlantes Bluetooth", "Parlantes port√°tiles", 6),
            ("Extensi√≥n El√©ctrica", "Zapatilla 6 tomas", 12),
        ]
        
        articulos = []
        for nombre, desc, stock in articulos_data:
            articulo = Articulo(
                nombre=nombre,
                descripcion=desc,
                stock=stock
            )
            db.add(articulo)
            articulos.append(articulo)
            print(f"  ‚úì Art√≠culo: {nombre} (Stock: {stock})")
        
        db.commit()
        
        # Generar reservas hist√≥ricas (√∫ltimos 90 d√≠as)
        print("\nüìÖ Generando reservas hist√≥ricas...")
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=90)
        
        reservas_creadas = 0
        dias_laborables = [0, 1, 2, 3, 4]  # Lunes a Viernes
        horas_populares = [9, 10, 11, 14, 15, 16, 17]
        propositos = [
            "Reuni√≥n de equipo",
            "Presentaci√≥n de proyecto",
            "Capacitaci√≥n",
            "Entrevista",
            "Workshop",
            "Planificaci√≥n estrat√©gica",
            "Revisi√≥n de proyecto",
            "Sesi√≥n de brainstorming",
            "Reuni√≥n con cliente",
            "Demo de producto",
            "Sprint planning",
            "Retrospectiva"
        ]
        
        current_date = start_date
        while current_date < end_date:
            # M√°s reservas en d√≠as laborables
            if current_date.weekday() in dias_laborables:
                num_reservas_dia = random.randint(4, 10)
            else:
                num_reservas_dia = random.randint(0, 3)
            
            for _ in range(num_reservas_dia):
                sala = random.choice(salas)
                usuario = random.choice(usuarios)
                
                # Hora de inicio (m√°s probable en horas populares)
                if random.random() < 0.7:
                    hora_inicio = random.choice(horas_populares)
                else:
                    hora_inicio = random.randint(8, 18)
                
                # Duraci√≥n (1-4 horas)
                duracion = random.choice([1, 1, 2, 2, 3, 4])
                
                fecha_inicio = current_date.replace(
                    hour=hora_inicio,
                    minute=random.choice([0, 30]),
                    second=0,
                    microsecond=0
                )
                fecha_fin = fecha_inicio + timedelta(hours=duracion)
                
                # Verificar conflictos
                conflicto = db.query(Reserva).filter(
                    Reserva.sala_id == sala.id,
                    Reserva.fecha_inicio < fecha_fin,
                    Reserva.fecha_fin > fecha_inicio
                ).first()
                
                if not conflicto:
                    reserva = Reserva(
                        sala_id=sala.id,
                        persona_id=usuario.id,
                        fecha_inicio=fecha_inicio,
                        fecha_fin=fecha_fin,
                        proposito=random.choice(propositos)
                    )
                    db.add(reserva)
                    reservas_creadas += 1
                    
                    # Asociar art√≠culos (60% de las reservas)
                    if random.random() < 0.6 and articulos:
                        num_articulos = random.randint(1, 3)
                        articulos_reserva = random.sample(
                            articulos,
                            min(num_articulos, len(articulos))
                        )
                        for articulo in articulos_reserva:
                            reserva.articulos.append(articulo)
            
            # Commit peri√≥dico
            if reservas_creadas % 50 == 0 and reservas_creadas > 0:
                db.commit()
                print(f"  ‚è≥ {reservas_creadas} reservas creadas...")
            
            current_date += timedelta(days=1)
        
        db.commit()
        print(f"  ‚úì {reservas_creadas} reservas hist√≥ricas creadas")
        
        # Generar reservas futuras
        print("\nüìÜ Generando reservas futuras...")
        reservas_futuras = 0
        future_date = end_date + timedelta(days=1)
        
        for i in range(20):
            fecha = future_date + timedelta(days=random.randint(0, 45))
            if fecha.weekday() in dias_laborables:
                sala = random.choice(salas)
                usuario = random.choice(usuarios)
                hora_inicio = random.choice(horas_populares)
                duracion = random.choice([1, 2, 3])
                
                fecha_inicio = fecha.replace(
                    hour=hora_inicio,
                    minute=random.choice([0, 30]),
                    second=0,
                    microsecond=0
                )
                fecha_fin = fecha_inicio + timedelta(hours=duracion)
                
                # Verificar conflictos
                conflicto = db.query(Reserva).filter(
                    Reserva.sala_id == sala.id,
                    Reserva.fecha_inicio < fecha_fin,
                    Reserva.fecha_fin > fecha_inicio
                ).first()
                
                if not conflicto:
                    reserva = Reserva(
                        sala_id=sala.id,
                        persona_id=usuario.id,
                        fecha_inicio=fecha_inicio,
                        fecha_fin=fecha_fin,
                        proposito=random.choice([
                            "Reuni√≥n planificada",
                            "Presentaci√≥n importante",
                            "Training session",
                            "Revisi√≥n trimestral"
                        ])
                    )
                    db.add(reserva)
                    reservas_futuras += 1
        
        db.commit()
        print(f"  ‚úì {reservas_futuras} reservas futuras creadas")
        
        # Resumen final
        print("\n" + "="*60)
        print("‚úÖ BASE DE DATOS INICIALIZADA EXITOSAMENTE")
        print("="*60)
        print(f"üë• Usuarios: {len(usuarios)} (1 admin + {len(usuarios)-1} usuarios)")
        print(f"üè¢ Salas: {len(salas)}")
        print(f"üì¶ Art√≠culos: {len(articulos)}")
        print(f"üìÖ Reservas hist√≥ricas: {reservas_creadas}")
        print(f"üìÜ Reservas futuras: {reservas_futuras}")
        print(f"üìä Total reservas: {reservas_creadas + reservas_futuras}")
        print("="*60)
        print("\nüí° CREDENCIALES DE ACCESO:")
        print("   üëë Admin:")
        print("      Email: admin@sistema.com")
        print("      Password: admin123")
        print("\n   üë§ Usuarios de prueba:")
        print("      Email: ana.perez@empresa.com (y otros)")
        print("      Password: user123")
        print("="*60)
        
    except SQLAlchemyError as e:
        db.rollback()
        print(f"\n‚ùå Error al inicializar la base de datos: {e}")
        import traceback
        traceback.print_exc()
    except Exception as e:
        db.rollback()
        print(f"\n‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()


if __name__ == "__main__":
    init_database()
