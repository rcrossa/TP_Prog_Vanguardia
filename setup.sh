#!/bin/bash
# setup.sh - Solo para Mac y Linux
set -e

echo "\nüöÄ Configurando Plataforma de Gesti√≥n de Reservas (Mac/Linux)"

# Validar dependencias m√≠nimas
for cmd in docker docker-compose python3 pip3; do
    if ! command -v $cmd &>/dev/null; then
        echo "‚ùå Error: '$cmd' no est√° instalado. Inst√°lalo antes de continuar."
        exit 1
    fi
done

# Verificar que Docker est√© ejecut√°ndose
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Error: Docker no est√° ejecut√°ndose. Inicia Docker Desktop o el servicio docker."
    exit 1
fi

# Configurar archivos .env si faltan
if [ ! -f ".env" ]; then
    echo "üìù Creando .env desde plantilla..."
    cp .env.example .env
fi
if [ ! -f "docker/.env" ]; then
    echo "üìù Creando docker/.env desde plantilla..."
    cp docker/.env.example docker/.env
fi

# Selecci√≥n de stack a levantar
echo "\nÔøΩ ¬øQu√© stack deseas iniciar?"
echo "1) Solo base de datos (db-only)"
echo "2) Full stack (Python + Java + DB)"
read -p "Selecciona una opci√≥n (1-2, default 1): " stack_option
stack_file="docker-compose.db-only.yml"
if [ "$stack_option" == "2" ]; then
    stack_file="docker-compose.full.yml"
fi

cd docker
echo "\nüê≥ Levantando servicios con $stack_file ..."
docker-compose -f $stack_file up -d

# Esperar a que la base de datos est√© lista
echo "‚è≥ Esperando a que PostgreSQL est√© listo..."
for i in {1..20}; do
    if docker-compose exec -T postgres pg_isready -U $(grep POSTGRES_USER .env | cut -d'=' -f2) > /dev/null 2>&1; then
        echo "‚úÖ PostgreSQL est√° listo."
        break
    fi
    sleep 2
done

cd ..


# Crear y activar entorno virtual
echo "\nüêç Configurando entorno virtual Python..."
if [ ! -d "venv" ]; then
    python3 -m venv venv
    echo "‚úÖ Entorno virtual creado en ./venv"
fi

# Activar entorno virtual seg√∫n shell
if [ -n "$ZSH_VERSION" ]; then
    source venv/bin/activate
elif [ -n "$BASH_VERSION" ]; then
    source venv/bin/activate
else
    . venv/bin/activate
fi

echo "\nüì¶ Instalando dependencias Python en el virtualenv..."
pip install --upgrade pip
pip install -r requirements.txt

# Mostrar credenciales
echo "\nüìã Credenciales configuradas (docker/.env):"
grep -E 'POSTGRES_USER|POSTGRES_PASSWORD|PGADMIN_DEFAULT_EMAIL|PGADMIN_DEFAULT_PASSWORD' docker/.env | sed 's/^/   /'


echo "\nüë§ Creando usuario administrador por defecto..."
if [ -f "create_admin.py" ]; then
    python create_admin.py || echo "‚ö†Ô∏è  No se pudo crear el admin autom√°ticamente. Puedes crearlo manualmente luego."
else
    echo "‚ö†Ô∏è  create_admin.py no encontrado."
fi

echo "\nüéâ Setup completado. Servicios disponibles:"
echo "   - PostgreSQL: localhost:5432"
echo "   - API Python: http://localhost:8000/docs"
echo "   - API Java:   http://localhost:8080/swagger-ui.html"
echo "   - PgAdmin:    http://localhost:5050"

echo "\nüîß Pr√≥ximos pasos:"
echo "   1. (Opcional) Edita .env y docker/.env si necesitas credenciales personalizadas."
echo "   2. Activa el entorno virtual en cada terminal: source venv/bin/activate"
echo "   3. Ejecuta el servicio Python: python main.py"
echo "   4. Ejecuta el Java Service en otra terminal:"
echo "      cd java-service && ./mvnw spring-boot:run"
echo "   5. Accede a la API y frontend en los puertos indicados."
echo "\nüí° Para Windows, usa setup_win.bat."